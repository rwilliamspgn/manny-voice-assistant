<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manny Voice Assistant</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }

        .assistant-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 500px;
            width: 90%;
        }

        .assistant-title {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .assistant-subtitle {
            font-size: 1.1em;
            opacity: 0.8;
            margin-bottom: 40px;
        }

        .voice-button {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: none;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            margin: 0 auto 30px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }

        .voice-button:hover {
            transform: scale(1.05);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
        }

        .voice-button:active {
            transform: scale(0.98);
        }

        .voice-button.listening {
            animation: pulse 1.5s infinite;
            background: linear-gradient(45deg, #ff4757, #ff3838);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .status {
            font-size: 1.1em;
            margin-bottom: 20px;
            min-height: 30px;
            opacity: 0.9;
        }

        .response {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            text-align: center;
        }

        .commands {
            text-align: left;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .commands h3 {
            margin-bottom: 15px;
            color: #4ecdc4;
            text-align: center;
        }

        .commands ul {
            list-style: none;
        }

        .commands li {
            margin-bottom: 8px;
            padding-left: 15px;
            position: relative;
        }

        .commands li::before {
            content: "•";
            color: #ff6b6b;
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        .error {
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid rgba(255, 107, 107, 0.3);
        }

        .mic-icon {
            font-size: 2em;
            margin-bottom: 5px;
        }

        .browser-support {
            margin-top: 20px;
            padding: 15px;
            background: rgba(255, 193, 7, 0.1);
            border-radius: 10px;
            border: 1px solid rgba(255, 193, 7, 0.3);
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="assistant-container">
        <h1 class="assistant-title">Manny</h1>
        <p class="assistant-subtitle">Your AI-powered voice assistant</p>
        
        <button class="voice-button" id="voiceButton">
            <div class="mic-icon">🎤</div>
            <div>Click to Talk</div>
        </button>
        
        <div class="status" id="status">Click the button and start speaking!</div>
        
        <div class="response" id="response">Hello! I'm Manny, your voice assistant. How can I help you today?</div>
        
        <div class="browser-support" id="browserSupport" style="display: none;">
            <strong>Note:</strong> Voice features work best in Chrome, Edge, or Safari. Make sure to allow microphone access when prompted.
        </div>
        
        <div class="commands">
            <h3>Try saying:</h3>
            <ul>
                <li>"Hey Manny, what time is it?"</li>
                <li>"Manny, what's the weather like?"</li>
                <li>"Manny, tell me a joke"</li>
                <li>"Hey Manny, what's 15 plus 27?"</li>
                <li>"Manny, set a timer for 5 minutes"</li>
                <li>"Hey Manny, what's the capital of France?"</li>
                <li>"Manny, play some music"</li>
                <li>"Manny, what's the date today?"</li>
            </ul>
        </div>
    </div>

    <script>
        console.log('Manny Voice Assistant Loading...');
        
        class VoiceAssistant {
            constructor() {
                this.recognition = null;
                this.synthesis = window.speechSynthesis;
                this.isListening = false;
                this.timers = new Map();
                this.voices = [];
                
                console.log('Initializing Voice Assistant...');
                this.initElements();
                this.checkBrowserSupport();
                this.initSpeechRecognition();
                this.loadVoices();
                this.bindEvents();
                
                console.log('Voice Assistant initialized successfully');
            }

            initElements() {
                this.voiceButton = document.getElementById('voiceButton');
                this.status = document.getElementById('status');
                this.response = document.getElementById('response');
                this.browserSupport = document.getElementById('browserSupport');
                
                if (!this.voiceButton || !this.status || !this.response) {
                    console.error('Required elements not found');
                    return false;
                }
                return true;
            }

            checkBrowserSupport() {
                const hasWebkitSpeech = 'webkitSpeechRecognition' in window;
                const hasSpeechRecognition = 'SpeechRecognition' in window;
                const hasSpeechSynthesis = 'speechSynthesis' in window;
                
                console.log('Browser Support Check:', {
                    webkitSpeechRecognition: hasWebkitSpeech,
                    SpeechRecognition: hasSpeechRecognition,
                    speechSynthesis: hasSpeechSynthesis,
                    isSecureContext: window.isSecureContext
                });

                if (!hasWebkitSpeech && !hasSpeechRecognition) {
                    this.showError('Speech recognition not supported in this browser. Please use Chrome, Edge, or Safari.');
                    return false;
                }

                if (!window.isSecureContext) {
                    this.showError('Voice features require HTTPS. Please access this page with https://');
                    return false;
                }

                if (!hasSpeechSynthesis) {
                    this.browserSupport.style.display = 'block';
                    this.browserSupport.innerHTML = '<strong>Note:</strong> Text-to-speech may not be fully supported in this browser.';
                }

                return true;
            }

            loadVoices() {
                // Load voices when they become available
                const loadVoicesWhenReady = () => {
                    this.voices = this.synthesis.getVoices();
                    console.log('Available voices:', this.voices.length);
                    
                    if (this.voices.length === 0) {
                        // Voices not loaded yet, try again
                        setTimeout(loadVoicesWhenReady, 100);
                    }
                };

                // Load voices immediately and on voiceschanged event
                loadVoicesWhenReady();
                this.synthesis.onvoiceschanged = loadVoicesWhenReady;
            }

            initSpeechRecognition() {
                try {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    
                    if (!SpeechRecognition) {
                        throw new Error('Speech recognition not supported');
                    }

                    this.recognition = new SpeechRecognition();
                    
                    // Configure recognition
                    this.recognition.continuous = false;
                    this.recognition.interimResults = false;
                    this.recognition.lang = 'en-US';
                    this.recognition.maxAlternatives = 1;

                    // Event handlers
                    this.recognition.onstart = () => {
                        console.log('Speech recognition started');
                        this.isListening = true;
                        this.voiceButton.classList.add('listening');
                        this.status.textContent = 'Listening... Speak now!';
                        this.voiceButton.innerHTML = '<div class="mic-icon">🔴</div><div>Listening...</div>';
                    };
                    
                    this.recognition.onresult = (event) => {
                        console.log('Speech recognition result:', event);
                        const transcript = event.results[0][0].transcript;
                        const confidence = event.results[0][0].confidence;
                        
                        console.log(`Transcript: "${transcript}" (confidence: ${confidence})`);
                        this.status.textContent = `You said: "${transcript}"`;
                        this.processCommand(transcript);
                    };
                    
                    this.recognition.onerror = (event) => {
                        console.error('Speech recognition error:', event.error);
                        let errorMessage = 'Sorry, I couldn\'t understand that.';
                        
                        switch(event.error) {
                            case 'no-speech':
                                errorMessage = 'No speech detected. Please try again.';
                                break;
                            case 'audio-capture':
                                errorMessage = 'No microphone found. Please check your microphone.';
                                break;
                            case 'not-allowed':
                                errorMessage = 'Microphone access denied. Please allow microphone access.';
                                break;
                            case 'network':
                                errorMessage = 'Network error occurred. Please check your connection.';
                                break;
                        }
                        
                        this.status.textContent = errorMessage;
                        this.showError(errorMessage);
                        this.resetButton();
                    };
                    
                    this.recognition.onend = () => {
                        console.log('Speech recognition ended');
                        this.resetButton();
                    };

                } catch (error) {
                    console.error('Failed to initialize speech recognition:', error);
                    this.showError('Speech recognition initialization failed. Please refresh and try again.');
                }
            }

            bindEvents() {
                if (this.voiceButton) {
                    this.voiceButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        console.log('Voice button clicked');
                        
                        if (!this.recognition) {
                            this.showError('Speech recognition not available');
                            return;
                        }

                        if (this.isListening) {
                            this.recognition.stop();
                        } else {
                            this.startListening();
                        }
                    });
                }
            }

            startListening() {
                if (!this.recognition || this.isListening) {
                    return;
                }

                try {
                    this.response.classList.remove('error');
                    console.log('Starting speech recognition...');
                    this.recognition.start();
                } catch (error) {
                    console.error('Error starting recognition:', error);
                    this.showError('Failed to start listening. Please try again.');
                }
            }

            resetButton() {
                this.isListening = false;
                this.voiceButton.classList.remove('listening');
                this.voiceButton.innerHTML = '<div class="mic-icon">🎤</div><div>Click to Talk</div>';
            }

            speak(text) {
                try {
                    // Cancel any ongoing speech
                    this.synthesis.cancel();
                    
                    const utterance = new SpeechSynthesisUtterance(text);
                    utterance.rate = 0.9;
                    utterance.pitch = 0.8; // Lower pitch for masculine voice
                    utterance.volume = 1;
                    
                    // Try to find a male voice
                    const maleVoice = this.voices.find(voice => {
                        const name = voice.name.toLowerCase();
                        return name.includes('male') || 
                               name.includes('daniel') ||
                               name.includes('alex') ||
                               name.includes('fred') ||
                               name.includes('david') ||
                               name.includes('guy') ||
                               voice.name.includes('Male');
                    });
                    
                    if (maleVoice) {
                        utterance.voice = maleVoice;
                        console.log('Using voice:', maleVoice.name);
                    } else {
                        console.log('No male voice found, using default');
                    }
                    
                    utterance.onend = () => {
                        console.log('Speech synthesis finished');
                    };
                    
                    utterance.onerror = (event) => {
                        console.error('Speech synthesis error:', event);
                    };
                    
                    this.synthesis.speak(utterance);
                    
                } catch (error) {
                    console.error('Error in speech synthesis:', error);
                }
            }

            processCommand(command) {
                const lowerCommand = command.toLowerCase().trim();
                console.log('Processing command:', lowerCommand);
                
                let response = '';

                // Check if the command addresses Manny
                const isAddressingManny = lowerCommand.includes('manny') || 
                                        lowerCommand.includes('hey manny') ||
                                        lowerCommand.includes('hi manny');

                // Check for wake words or direct commands
                const hasWakeWord = isAddressingManny || 
                                  lowerCommand.startsWith('hey ') ||
                                  lowerCommand.startsWith('hi ') ||
                                  lowerCommand.includes('hello');

                // If no wake word and not a direct command, suggest using "Manny"
                if (!hasWakeWord && !this.isDirectCommand(lowerCommand)) {
                    response = "Hi! I'm Manny. You can get my attention by saying 'Hey Manny' or 'Manny' before your request.";
                    this.displayResponse(response);
                    this.speak(response);
                    return;
                }

                // Clean the command by removing wake words
                let cleanCommand = lowerCommand
                    .replace(/hey manny,?\s*/g, '')
                    .replace(/hi manny,?\s*/g, '')
                    .replace(/manny,?\s*/g, '')
                    .replace(/hey,?\s*/g, '')
                    .replace(/hi,?\s*/g, '')
                    .trim();

                // Process commands
                if (cleanCommand.includes('time')) {
                    const now = new Date();
                    const timeString = now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    response = `The current time is ${timeString}`;
                }
                else if (cleanCommand.includes('date') || cleanCommand.includes('today')) {
                    const now = new Date();
                    const dateString = now.toLocaleDateString('en-US', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
                    response = `Today is ${dateString}`;
                }
                else if (cleanCommand.includes('weather')) {
                    response = "I'd love to check the weather for you, but I need internet access for real-time data. Try asking your device's built-in weather app!";
                }
                else if (this.containsMath(cleanCommand)) {
                    response = this.calculateMath(cleanCommand);
                }
                else if (cleanCommand.includes('timer') || cleanCommand.includes('remind me')) {
                    response = this.setTimer(cleanCommand);
                }
                else if (cleanCommand.includes('joke') || cleanCommand.includes('funny')) {
                    response = this.getJoke();
                }
                else if (cleanCommand.includes('music') || cleanCommand.includes('song')) {
                    response = "I can't play music directly, but I'd recommend opening your favorite music app like Spotify, Apple Music, or YouTube Music!";
                }
                else if (cleanCommand.includes('capital')) {
                    response = this.getCapital(cleanCommand);
                }
                else if (cleanCommand.includes('hello') || cleanCommand.includes('hi') || 
                         cleanCommand.includes('hey') || cleanCommand === '') {
                    response = "Hello! I'm Manny, your voice assistant. How can I help you today?";
                }
                else {
                    response = "I heard you, but I'm not sure how to help with that. Try asking about the time, weather, or tell me to tell you a joke!";
                }

                this.displayResponse(response);
                this.speak(response);
            }

            containsMath(command) {
                return command.includes('plus') || command.includes('minus') || 
                       command.includes('times') || command.includes('divided') ||
                       command.includes('calculate') || command.includes('what is') ||
                       /\d+\s*([\+\-\*\/]|\bplus\b|\bminus\b|\btimes\b|\bdivided\b)\s*\d+/.test(command);
            }

            isDirectCommand(command) {
                const directCommands = ['time', 'date', 'weather', 'joke', 'music', 'hello', 'hi', 'calculate'];
                return directCommands.some(cmd => command.includes(cmd)) ||
                       command.includes('what is') ||
                       command.includes('timer') ||
                       command.includes('capital') ||
                       this.containsMath(command);
            }

            calculateMath(command) {
                try {
                    // Extract numbers and operations from speech
                    let expression = command
                        .replace(/what is/g, '')
                        .replace(/calculate/g, '')
                        .replace(/plus/g, '+')
                        .replace(/add/g, '+')
                        .replace(/minus/g, '-')
                        .replace(/subtract/g, '-')
                        .replace(/times/g, '*')
                        .replace(/multiply/g, '*')
                        .replace(/divided by/g, '/')
                        .replace(/divide/g, '/')
                        .trim();

                    // Simple regex to find math expressions
                    const mathMatch = expression.match(/(\d+(?:\.\d+)?)\s*([\+\-\*\/])\s*(\d+(?:\.\d+)?)/);
                    
                    if (mathMatch) {
                        const num1 = parseFloat(mathMatch[1]);
                        const operator = mathMatch[2];
                        const num2 = parseFloat(mathMatch[3]);
                        
                        let result;
                        let operatorWord;
                        
                        switch (operator) {
                            case '+':
                                result = num1 + num2;
                                operatorWord = 'plus';
                                break;
                            case '-':
                                result = num1 - num2;
                                operatorWord = 'minus';
                                break;
                            case '*':
                                result = num1 * num2;
                                operatorWord = 'times';
                                break;
                            case '/':
                                result = num1 / num2;
                                operatorWord = 'divided by';
                                break;
                            default:
                                return "I can help with basic math. Try saying something like 'what is 15 plus 27?'";
                        }
                        
                        return `${num1} ${operatorWord} ${num2} equals ${result}`;
                    }
                } catch (error) {
                    console.error('Math calculation error:', error);
                }
                
                return "I can help with basic math. Try saying something like 'what is 15 plus 27?'";
            }

            setTimer(command) {
                const match = command.match(/(\d+)\s*(minute|minutes|min|second|seconds|sec)/i);
                if (match) {
                    const duration = parseInt(match[1]);
                    const unit = match[2].toLowerCase();
                    const milliseconds = unit.startsWith('min') ? duration * 60000 : duration * 1000;
                    
                    setTimeout(() => {
                        const message = `Time's up! Your ${duration} ${unit} timer is finished.`;
                        this.speak(message);
                        this.displayResponse(`⏰ ${message}`);
                    }, milliseconds);
                    
                    return `Timer set for ${duration} ${unit}. I'll let you know when it's done!`;
                }
                return "I can set a timer for you! Try saying 'set a timer for 5 minutes' or 'remind me in 30 seconds'.";
            }

            getJoke() {
                const jokes = [
                    "Why don't scientists trust atoms? Because they make up everything!",
                    "I told my wife she was drawing her eyebrows too high. She looked surprised.",
                    "Why don't eggs tell jokes? They'd crack each other up!",
                    "What do you call a fake noodle? An impasta!",
                    "Why did the scarecrow win an award? He was outstanding in his field!",
                    "What do you call a bear with no teeth? A gummy bear!",
                    "Why don't programmers like nature? It has too many bugs!",
                    "What's the best thing about Switzerland? I don't know, but the flag is a big plus!"
                ];
                return jokes[Math.floor(Math.random() * jokes.length)];
            }

            getCapital(command) {
                const capitals = {
                    'france': 'Paris',
                    'germany': 'Berlin',
                    'italy': 'Rome',
                    'spain': 'Madrid',
                    'uk': 'London',
                    'united kingdom': 'London',
                    'england': 'London',
                    'usa': 'Washington D.C.',
                    'united states': 'Washington D.C.',
                    'america': 'Washington D.C.',
                    'japan': 'Tokyo',
                    'china': 'Beijing',
                    'russia': 'Moscow',
                    'canada': 'Ottawa',
                    'australia': 'Canberra',
                    'brazil': 'Brasília',
                    'india': 'New Delhi',
                    'mexico': 'Mexico City',
                    'egypt': 'Cairo'
                };

                for (const [country, capital] of Object.entries(capitals)) {
                    if (command.includes(country)) {
                        return `The capital of ${country.charAt(0).toUpperCase() + country.slice(1)} is ${capital}.`;
                    }
                }

                return "I know the capitals of many countries! Try asking about France, Germany, Japan, or the United States.";
            }

            displayResponse(text) {
                this.response.textContent = text;
                this.response.classList.remove('error');
                this.status.textContent = 'Response ready!';
            }

            showError(message) {
                this.response.textContent = message;
                this.response.classList.add('error');
                this.browserSupport.style.display = 'block';
            }
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing Voice Assistant...');
            try {
                window.mannyAssistant = new VoiceAssistant();
            } catch (error) {
                console.error('Failed to initialize Voice Assistant:', error);
                document.getElementById('response').textContent = 'Failed to initialize voice assistant. Please refresh the page.';
                document.getElementById('response').classList.add('error');
            }
        });

        // Also try to initialize immediately in case DOMContentLoaded already fired
        if (document.readyState === 'loading') {
            // Document still loading, wait for DOMContentLoaded
        } else {
            // Document already loaded
            console.log('Document already loaded, initializing immediately...');
            try {
                window.mannyAssistant = new VoiceAssistant();
            } catch (error) {
                console.error('Failed to initialize Voice Assistant:', error);
            }
        }
    </script>
</body>
</html>